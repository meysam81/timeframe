name: ci

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "*"
  schedule:
    - cron: "45 10 * * 1"

env:
  PYTHON_VERSION: "3.x"

jobs:
  tests:
    if: contains(fromJson('["push", "pull_request"]'), github.event_name) && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare
        run: |
          pip install -U pip tox
      - name: Run tests
        run: tox -e py${{ matrix.python-version }}
      - name: Coverage Report
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  semantic-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.GH_DEPLOY_KEY }}
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install bun deps
        run: bun install
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Prepare
        run: |
          pip install -U pip wheel setuptools
      - name: Install goreleaser
        run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt update
          sudo apt install -y goreleaser
          goreleaser --version
      - id: semantic-release
        name: Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: bunx semantic-release@v24
      - if: steps.semantic-release.outputs.version != ''
        env:
          PACKAGE_VERSION: ${{ steps.semantic-release.outputs.version }}
        name: Build package
        run: |
          python setup.py sdist bdist_wheel
      - if: steps.semantic-release.outputs.version != ''
        name: Publish PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  linter:
    if: contains(fromJson('["push", "pull_request"]'), github.event_name) && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Prepare
        run: |
          pip install -U pip pre-commit
      - name: Run linter
        run: |
          pre-commit run -a
      - if: failure()
        name: Commit linting changes
        uses: EndBug/add-and-commit@v9
        with:
          message: "chore: lint ðŸš¨"
          new_branch: ${{ github.head_ref || github.ref_name }}

  analyze:
    if: contains(fromJson('["push", "pull_request", "schedule"]'), github.event_name) && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["python"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-review:
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
      - name: "Dependency Review"
        uses: actions/dependency-review-action@v4

  trivy:
    if: contains(fromJson('["push","pull_request","schedule"]'), github.event_name)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          exit-code: "1"
          format: template
          output: trivy-results.sarif
          scan-ref: .
          scan-type: fs
          template: "@/contrib/sarif.tpl"
          trivy-config: trivy.yaml
      - if: failure()
        name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
      - if: always()
        name: Upload Trivy results to Github Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif
